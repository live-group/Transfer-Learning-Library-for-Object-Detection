# --------------------------------------------------------
# Fast R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick
# --------------------------------------------------------

"""Factory method for easily getting imdbs by name."""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__sets = {}
# from datasets.pascal_voc import pascal_voc
# from datasets.sim10k import sim10k
# from datasets.clipart import clipart
from IDF.cityscape import cityscape
# from datasets.cityscape_car import cityscape_car
from IDF.foggy_cityscape import foggy_cityscape
# from datasets.kitti_car import kitti_car
import numpy as np
from model.utils.config import cfg
import os


###########################################
'''
for year in ['2007', '2012']:
  for split in ['train', 'val', 'trainval','trainval_cg']:
    name = 'voc_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split, year=year: pascal_voc(split, year))

for year in ['2007']:
  for split in ['train', 'val', 'train_cg']:
    name = 'clipart_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split : clipart(split,year))
'''

# This data set contain two parts. One is the original cityscape, another is the fake cityscape.
# The latter is generated by CycleGAN in which content is cityscape and style is foggy-cityscape.
# 'train': original cityscape; 'train_fg': fake cityscape; 'train_combine_fg': original and fake cityscape;
# 'train_combine_fg_mosaic': the mosaic augmented version of original and fake cityscape;
# 'train_combine_fg_combine_mosaic'：original and fake cityscape and their mosaic augmented version
for year in ['2007']:
  for split in ['train', 'train_fg', 'train_combine_fg', 'train_combine_fg_mosaic', 'train_combine_fg_combine_mosaic']:
    name = 'cs_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: cityscape(split, year))

# This data set contain two parts. One is the original foggy-cityscape, another is the fake foggy-cityscape.
# The latter is generated by CycleGAN in which content is foggy-cityscape and style is cityscape.
# 'train': original foggy-cityscape; 'train_cs': fake foggy-cityscape; 'train_combine_cs': original and fake foggy-cityscape
# 'train_combine_cs_mosaic': the mosaic augmented version of original and fake foggy-cityscape;
# 'train_combine_cs_combine_mosaic'：original and fake foggy-cityscape and their mosaic augmented version
for year in ['2007']:
  for split in ['train', 'train_cs', 'train_combine_cs', 'train_combine_cs_mosaic', 'train_combine_cs_combine_mosaic']:
    name = 'cs_fg_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: foggy_cityscape(split, year))

# 'train_s',  'test_s':cityscape;     'train_t',  'test_t': foggy_cityscape;
for year in ['2007']:
  for split in ['train_s', 'train_t', 'test_s', 'test_t']:
    name = 'cityscape_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: cityscape(split, year, \
                                                  devkit_path = os.path.join(cfg.DATA_DIR, 'cityscape'), \
                                                  imdb_name = 'cityscape_'))

'''
for year in ['2012']:
  for split in ['trainval', 'trainval_combine']:
    name = 'sim10k_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: sim10k(split, '2012'))

for year in ['2007']:
  for split in ['train', 'val', 'train_combine','train_combine_kt']:
    name = 'cs_car_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: cityscape_car(split, year))

for year in ['2007']:
  for split in ['trainval', 'trainval_combine']:
    name = 'kitti_car_{}_{}'.format(year, split)
    __sets[name] = (lambda split=split: kitti_car(split, year))
'''
###########################################


def get_imdb(name):
  """Get an imdb (image database) by name."""
  if name not in __sets:
    raise KeyError('Unknown dataset: {}'.format(name))
  return __sets[name]()


def list_imdbs():
  """List all registered imdbs."""
  return list(__sets.keys())
